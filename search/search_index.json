{"config":{"indexing":"full","lang":["en","es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Welcome Bienvenidos a un p\u00e1gina de documentaci\u00f3n de uso personal Wolfremium-Docs, aqu\u00ed se destacar\u00e1n tanto experiencias como frases de libros. La mayor\u00eda de cosas dispuestas aqu\u00ed no tienen porqu\u00e9 estar de acuerdo con tus conocimientos respecto a estos temas. \u00c9l uso qu\u00e9 les doy es como un borrador online al cu\u00e1l consultar, por desgracia Google a\u00fan no puede contestar con precisi\u00f3n bas\u00e1ndose en blogs de personas qu\u00e9 toman su propia opini\u00f3n en consideraci\u00f3n.","title":"Welcome"},{"location":"#welcome","text":"Bienvenidos a un p\u00e1gina de documentaci\u00f3n de uso personal Wolfremium-Docs, aqu\u00ed se destacar\u00e1n tanto experiencias como frases de libros. La mayor\u00eda de cosas dispuestas aqu\u00ed no tienen porqu\u00e9 estar de acuerdo con tus conocimientos respecto a estos temas. \u00c9l uso qu\u00e9 les doy es como un borrador online al cu\u00e1l consultar, por desgracia Google a\u00fan no puede contestar con precisi\u00f3n bas\u00e1ndose en blogs de personas qu\u00e9 toman su propia opini\u00f3n en consideraci\u00f3n.","title":"Welcome"},{"location":"agile/","text":"Agile Historia Inicios Lo primero que hay que decir es que lo que ahora se conoce como Agile surgi\u00f3 a partir de los a\u00f1os ochenta del pasado siglo (e incluso antes) en forma de metodolog\u00edas \u201cligeras\u201d de desarrollo software, como respuesta a las limitaciones de las metodolog\u00edas \u201cpesadas\u201d tipo Waterfall. Realmente la metodolog\u00eda en s\u00ed se basa en metodolog\u00edas de otro tipo de ingenier\u00edas o del \u00e1mbito cient\u00edfico haciendo una aproximaci\u00f3n de c\u00f3mo deber\u00eda ser en el software. Sin embargo el desarrollo de programas, por su propia naturaleza, no se ajusta muy bien a dichas condiciones: la complejidad de los problemas que se suelen resolver mediante software, la indefinici\u00f3n de los requisitos del cliente, la importancia de la interacci\u00f3n entre el producto final y sus usuarios, el continuo cambio tecnol\u00f3gico, etc. hac\u00edan imposible que aspectos como la soluci\u00f3n dada al problema del cliente, los requisitos, el dise\u00f1o e incluso la arquitectura del programa pudieran mantenerse constantes durante el desarrollo. Y el modelo en cascada no est\u00e1 preparado para encajar bien esos cambios. La facilidad para \u201ccomponentizar\u201d/modularizar el desarrollo, crear prototipos o automatizar las pruebas y los ( comparativamente) bajos costes de realizar cambios que aporta su naturaleza \u201cinmaterial\u201d. A partir de los pasados a\u00f1os ochenta empiezan a aparecer una serie de nuevos modelos para el desarrollo de software a medida, tales como el Desarrollo R\u00e1pido de Aplicaciones, el Espiral o el Proceso Unificado y -m\u00e1s tarde- metodolog\u00edas como XP (Extreme Programming) o FDD (Feature Driven Development). Estas metodolog\u00edas se basan en un desarrollo iterativo e incremental en el que los requisitos y las soluciones van evolucionando gracias a la comunicaci\u00f3n con los usuarios y la colaboraci\u00f3n entre equipos multidisciplinares autoorganizados. El cambio En febrero de 2001 diecisiete expertos en desarrollo de software publicaron el \u201cManifesto for Agile Software Development\u201d, que dio un nombre, una carta de naturaleza y una \u201cmarca\u201d a todos esos m\u00e9todos. B\u00e1sicamente el Manifiesto consta de cuatro puntos en los que se da prioridad a los individuos y las interacciones, al software que funciona, a la colaboraci\u00f3n con el cliente y a la respuesta ante el cambio. Es importante se\u00f1alar que cuando se habla de Agile se suele hablar en realidad de alguna de las metodolog\u00edas precursoras, en particular de dos que son las m\u00e1s aceptadas (y que son anteriores al Manifiesto): Scrum (1995), un marco iterativo e incremental para la gesti\u00f3n de proyectos, inicialmente propuesto para proyectos de desarrollo de productos y cuyo uso se ha centrado en proyectos de desarrollo de software. XP (Extreme Programming, 1996) una metodolog\u00eda iterativa de desarrollo de software que aboga por entregas frecuentes de software en ciclos de desarrollo cortos y que recibe ese nombre por su \u00e9nfasis en llevar al extremo esas buenas pr\u00e1cticas. Agile es un conjunto de valores, completamente independiente de la ejecuci\u00f3n. Espec\u00edficamente, son estos valores: Individuos e interacciones sobre procesos y herramientas Software de trabajo sobre documentaci\u00f3n completa Colaboraci\u00f3n con el cliente sobre negociaci\u00f3n de contratos Responder al cambio en lugar de seguir un plan Estos valores abarcan los procesos y la toma de decisiones. No son reglas y pr\u00e1cticas para desarrollar software. Las reglas y pr\u00e1cticas provienen de los marcos \u00e1giles (Scrum, XP, Kanban, SAFe). Los marcos brindan instrucciones detalladas sobre c\u00f3mo un equipo puede aprender a pensar de manera \u00e1gil y fomentar los valores \u00e1giles. No son \u00e1giles en s\u00ed mismos. Son herramientas que, cuando se usan correctamente, pueden respaldar los valores \u00e1giles. En realidad muchos de los principios de Agile (como por ejemplo incrementar la flexibilidad o la comunicaci\u00f3n) son ideas de sentido com\u00fan pensadas para enmendar el mal funcionamiento de las metodolog\u00edas tradicionales en ciertos escenarios y para arreglar equipos de proyecto disfuncionales Ventajas / Desventajas Los beneficios en cuanto a flexibilidad, adaptaci\u00f3n, comunicaci\u00f3n y coordinaci\u00f3n que Agile aporta en escenarios inciertos y vol\u00e1tiles son evidentes. Sin embargo, en estos a\u00f1os se han alzado voces cr\u00edticas con esta filosof\u00eda debido a posibles limitaciones como las siguientes: Est\u00e1 muy enfocada en la captura de requisitos y el desarrollo, pero pone un foco escaso en el dise\u00f1o y en la experiencia global del usuario de la soluci\u00f3n Falta de estructura y documentaci\u00f3n Puede aumentar el riesgo de una expansi\u00f3n incontrolada del alcance del proyecto Solo funciona bien con desarrolladores experimentados Requiere reuniones muy frecuentes con los clientes, con el consiguiente coste Dificultad para escalar a proyectos grandes y con personal distribuido geogr\u00e1ficamente Algunas organizaciones encuentran dif\u00edcil implantar Agile en toda su extensi\u00f3n -con el cambio de cultura que requiere- y se quedan en sus pr\u00e1cticas superficiales Ese es tambi\u00e9n el motivo por el que las pr\u00e1cticas de Agile llevan a\u00f1os evolucionando para solucionar sus carencias y ser aplicables en escenarios m\u00e1s generales. En cualquier caso, es evidente que la flexibilidad que aporta Agile no es gratis y a veces sus costes pueden superar a sus beneficios. Dark Agile El problema es cuando un equipo comienza a utilizar un marco Agile de forma incorrecta . El equipo comienza a centrarse m\u00e1s en su adherencia al proceso que en mantenerse fieles a los valores \u00e1giles. Esto es Dark Agile. El descubrimiento comienza a ser secuencial, donde los requisitos impulsan el dise\u00f1o, que a su vez impulsa el c\u00f3digo. Esto se opone a que el trabajo se defina y dise\u00f1e de manera colaborativa. Los resultados esperados comienzan a ser productos , a diferencia de los resultados comerciales (resultados). Todo riesgo est\u00e1 al final del proceso , en oposici\u00f3n a los riesgos que se abordan por adelantado, lo antes posible. S\u00edntomas de Dark Agile Estos s\u00edntomas pueden manifestarse de muchas formas. El cambio suele venir de arriba hacia abajo. Surgir\u00e1n fechas l\u00edmite para funciones espec\u00edficas. Se le empezar\u00e1 a decir al equipo qu\u00e9 construir y no qu\u00e9 problemas resolver. La gerencia, o el propietario del producto, comienza a presionar al equipo para que haga m\u00e1s y m\u00e1s r\u00e1pidamente. B\u00e1sicamente, el equipo no puede organizarse por s\u00ed mismo ni participar en el proceso de planificaci\u00f3n. Puede ser que el desarrollo sea completamente \u00e1gil, pero el proceso de descubrimiento no lo es. El descubrimiento se convierte en un proceso en el que alguien tiene una idea, la convierte en la hoja de ruta sin validaci\u00f3n, el propietario del producto re\u00fane exhaustivamente todos los requisitos necesarios, el dise\u00f1o le pone maquillaje y se env\u00eda al desarrollo para construir. No hay prueba ni validaci\u00f3n de la idea antes del desarrollo. Una vez que llega a los desarrolladores, comienzan la primera parte del proyecto que es \u00e1gil, pero en este punto ya es demasiado tarde. No hay pruebas de supuestos antes del desarrollo. Todo el riesgo se sigue guardando para el final del proceso. Es f\u00e1cil caer en estos malos h\u00e1bitos, especialmente si trabaja en una organizaci\u00f3n donde el resto de la empresa opera de manera no \u00e1gil. Para encajar en las actividades de planificaci\u00f3n de la organizaci\u00f3n, se le pide al grupo de desarrollo que haga hojas de ruta y compromisos, de modo que los otros grupos de la organizaci\u00f3n puedan planificar en consecuencia. Dark Agile puede volverse inevitable. Disminuir Dark Agile Se deben rastrear sus pr\u00e1cticas hasta su ra\u00edz en los valores \u00e1giles y socializar este v\u00ednculo con frecuencia. Los valores de Agile deben ser la lente a trav\u00e9s de la cual se vean las estrategias y decisiones. Deben fomentarse las discusiones frecuentes y detalladas sobre los valores y c\u00f3mo se aplican a las situaciones cotidianas. Adem\u00e1s de esto, debe observarse un enfoque en los tres principios que combaten los s\u00edntomas comunes de Dark Agile. Los riesgos se abordan lo antes posible en el proceso, en lugar de al final. El trabajo se define y dise\u00f1a de manera colaborativa, en lugar de secuencial. La atenci\u00f3n se centra en resolver problemas, no en implementar funciones. No existe una f\u00f3rmula m\u00e1gica para conquistar Dark Agile, solo una b\u00fasqueda incesante de inculcar los valores de Agile. Agile Inception o Sprint Cero Empezamos cada proyecto con Inception, un ejercicio de descubrimiento que crea el escenario para un producto y produce un backlog inicial. Claro hasta ese momento no hay software que funcione, pero se tiene una idea clara de por qu\u00e9 queremos construir algo. T\u00edpicamente el proceso toma un d\u00eda completo, y la asistencia incluye a todo el equipo (desarrolladores, gerentes de producto, dise\u00f1adores, analistas de soporte, UX, ingenieros, testers, etc.). Objetivos, riesgos y anti-objetivos En lugar de intentar priorizar al inicio, lo mejor es empezar por capturar todo lo que se ha podido identificar con los participantes de la sesi\u00f3n y luego agrupar los temas para los objetivos: pol\u00edticas de la empresa, propuestas de valor, riesgos sensibles al tiempo, y posibles nuevas caracter\u00edsticas. Un buen contrapunto a las metas son los \u00abanti-objetivos\u00bb o el \u00abno-haremos\u00bb, un t\u00e9rmino para capturar todo lo que podr\u00eda ser importante alg\u00fan d\u00eda, pero que representa una amenaza para lograr las metas. Es importante asegurarse de que cada elemento en los anti-objetivos pertenece all\u00ed, y todo el mundo est\u00e1 de acuerdo (y sabe por qu\u00e9). Los riesgos son interesantes porque la intuici\u00f3n humana es a menudo el mejor indicador de los problemas futuros. \u00bfQu\u00e9 es Flaccid Scrum o Flaccid Agile? Flaccid Scrum es descrito por Martin Fowler como un escenario en el que un equipo de Scrum \"adopta las pr\u00e1cticas de Scrum, y tal vez incluso los principios de Scrum\", pero \"despu\u00e9s de un tiempo el progreso es lento porque el c\u00f3digo base es un desastre\", porque \"no han pagado suficiente atenci\u00f3n a la calidad interna de su software \u201d. Se postula que esto ocurre porque Scrum est\u00e1 orientado a la gesti\u00f3n en lugar de a la ingenier\u00eda, y este desaire a Scrum no es un desconocido para la comunidad de Scrum. Un ejemplo de esto lo describe \"Uncle Bob\" con una analog\u00eda en la qu\u00e9 una metodolog\u00eda muy r\u00e1pida tiene una deuda t\u00e9cnica muy grande no se puede ser r\u00e1pido y escribir c\u00f3digo de calidad al mismo tiempo. El marketing alredor de Agile \u00bfC\u00f3mo las empresas ven el Agile como una forma de vender proyectos o cursos? Realmente no hay una respuesta concreta a esta pregunta, debido a qu\u00e9 cada empresa lo interpreta de forma distinta, esto crea varias vertientes en el mundo Agile. Hay muchas personas qu\u00e9 piensan que el objetivo original de restablecer la La conexi\u00f3n de negocio con el \u00e1rea t\u00e9cnica no ha sido suficiente. Por lo tanto vamos a tener empresas que vendan sus cursos como la \u00faltima coca-cola del desierto y si no te funciona es qu\u00e9 no eres lo suficientemente \u00e1gil. La contra parte, la qu\u00e9 te dice: \"ey! esto no se aprende en 1 d\u00eda\". \u00bfC\u00f3mo afecta qu\u00e9 ten la medalla de Agile sabiendo programar pero sin saber dise\u00f1o, refactoring o pruebas unitarias? Este tipo de cosas suceden muchas veces debido a que los \"developers\" no les interesa tanto el tema c\u00f3mo a los \"proyect managers\", esto acarrea una serie de problemas a la larga debido a estos \u00faltimos, exigen la mayor\u00eda de veces a las personas a su cargo qu\u00e9 su idea de Agile (o c\u00f3mo se lo vendieron) es lo mejor para su equipo y mejorar los ritmos de trabajo y productividad. Al mismo tiempo no tienen cuidado de lo qu\u00e9 en realidad piden al no tener conocimientos adecuados del tema. Realmente si lo miras desde fuera tampoco est\u00e1 mal intencionado, pero si reconozco qu\u00e9 si le das una herramienta a alguien se puede hacer da\u00f1o a \u00e9l y a los dem\u00e1s si la usa mal o no conoce lo malo de esta. Por la parte de los \"developers\" qu\u00e9 se auto determinan Agile por haber hecho un cursito o hacer alg\u00fan test y desconocen lo mencionado en la pregunta es muy probable qu\u00e9 apliquen de forma pobre la idea de Agile si este no busca a diario crecer como programador escribiendo mejor c\u00f3digo para las personas. Otros buscan hacer su empresa Agile y se dan de morros contra sus jefes o negocio. Tengo la impresi\u00f3n de qu\u00e9 sucede algo parecido a lo anterior pero ahora es el developer el que quiere cambiar, podr\u00eda usar la misma analog\u00eda pero realmente no es la misma. Creo qu\u00e9 es m\u00e1s importante ir haciendo t\u00fa peque\u00f1as cosas Agile en el d\u00eda a d\u00eda qu\u00e9 buscar cambiar la cultura de toda la empresa lo cu\u00e1l puede destinarla al fracaso a todos los niveles si no lo hacen bien y a tiempo. Innovation theather - Steve Blank A medida que las organizaciones crecen, comienzan a priorizar el proceso sobre el producto. Eso impide la innovaci\u00f3n real. Cuando las organizaciones se dan cuenta de esto, por lo general responden de tres maneras: contratando consultores para hacer una reorganizaci\u00f3n (eso es \"organizational theater\"), adoptando nuevos procesos como hackatones para estimular la innovaci\u00f3n (eso es \" innovation theater \") o tomando medidas para intentar reformar sus comportamientos burocr\u00e1ticos (eso es \"process theater\"). En cambio, lo que las organizaciones necesitan es una Doctrina de Innovaci\u00f3n que aborde la cultura, la mentalidad, el proceso y oriente los esfuerzos de la organizaci\u00f3n para lograr innovaciones reales. Agile contra la realidad \u00bfC\u00f3mo de compatibles son los principios de entorno colaborativo con el rendimiento? Adem\u00e1s del evidente intercambio de conocimientos que da paso al aprendizaje individual y grupal, un entorno colaborativo ofrece muchos otros beneficios que impactan positivamente al rendimiento de la empresa como por ejemplo fortalecer los lazos de cooperaci\u00f3n entre los integrantes El trabajo cooperativo requiere ciertos retos y actitudes para superar las desventajas que tiene y convertirse as\u00ed en una forma exitosa de organizaci\u00f3n. Existen ciertas trabas que acent\u00faan los inconvenientes del trabajo colaborativo. Al igual que ocurre en el trabajo en equipo, la relaci\u00f3n entre compa\u00f1eros puede ser complicada por la incompatibilidad de personalidades o por una posible competici\u00f3n entre ellos. Por ejemplo si la colaboraci\u00f3n no es un \u00e9xito supondr\u00e1 un malgasto de recursos y perjudicar\u00e1 a las personas y la organizaci\u00f3n. \u00bfSi Agile es tan bueno por qu\u00e9 hay proyectos qu\u00e9 a\u00fan usan Waterfall? Sencillo, no vas a encontrar peor metodolog\u00eda que un Agile mal implementado. El Agile mal implementado te puede traer costos excesivos de desarrollo, implementaci\u00f3n de tecnolog\u00edas no sustentables para los equipos internos, cambios constantes y falta de documentaci\u00f3n necesaria para el futuro. Es as\u00ed como muchas caen en el \u201cinnovation theather\u201d.","title":"Agile"},{"location":"agile/#agile","text":"","title":"Agile"},{"location":"agile/#historia","text":"","title":"Historia"},{"location":"agile/#inicios","text":"Lo primero que hay que decir es que lo que ahora se conoce como Agile surgi\u00f3 a partir de los a\u00f1os ochenta del pasado siglo (e incluso antes) en forma de metodolog\u00edas \u201cligeras\u201d de desarrollo software, como respuesta a las limitaciones de las metodolog\u00edas \u201cpesadas\u201d tipo Waterfall. Realmente la metodolog\u00eda en s\u00ed se basa en metodolog\u00edas de otro tipo de ingenier\u00edas o del \u00e1mbito cient\u00edfico haciendo una aproximaci\u00f3n de c\u00f3mo deber\u00eda ser en el software. Sin embargo el desarrollo de programas, por su propia naturaleza, no se ajusta muy bien a dichas condiciones: la complejidad de los problemas que se suelen resolver mediante software, la indefinici\u00f3n de los requisitos del cliente, la importancia de la interacci\u00f3n entre el producto final y sus usuarios, el continuo cambio tecnol\u00f3gico, etc. hac\u00edan imposible que aspectos como la soluci\u00f3n dada al problema del cliente, los requisitos, el dise\u00f1o e incluso la arquitectura del programa pudieran mantenerse constantes durante el desarrollo. Y el modelo en cascada no est\u00e1 preparado para encajar bien esos cambios. La facilidad para \u201ccomponentizar\u201d/modularizar el desarrollo, crear prototipos o automatizar las pruebas y los ( comparativamente) bajos costes de realizar cambios que aporta su naturaleza \u201cinmaterial\u201d. A partir de los pasados a\u00f1os ochenta empiezan a aparecer una serie de nuevos modelos para el desarrollo de software a medida, tales como el Desarrollo R\u00e1pido de Aplicaciones, el Espiral o el Proceso Unificado y -m\u00e1s tarde- metodolog\u00edas como XP (Extreme Programming) o FDD (Feature Driven Development). Estas metodolog\u00edas se basan en un desarrollo iterativo e incremental en el que los requisitos y las soluciones van evolucionando gracias a la comunicaci\u00f3n con los usuarios y la colaboraci\u00f3n entre equipos multidisciplinares autoorganizados.","title":"Inicios"},{"location":"agile/#el-cambio","text":"En febrero de 2001 diecisiete expertos en desarrollo de software publicaron el \u201cManifesto for Agile Software Development\u201d, que dio un nombre, una carta de naturaleza y una \u201cmarca\u201d a todos esos m\u00e9todos. B\u00e1sicamente el Manifiesto consta de cuatro puntos en los que se da prioridad a los individuos y las interacciones, al software que funciona, a la colaboraci\u00f3n con el cliente y a la respuesta ante el cambio. Es importante se\u00f1alar que cuando se habla de Agile se suele hablar en realidad de alguna de las metodolog\u00edas precursoras, en particular de dos que son las m\u00e1s aceptadas (y que son anteriores al Manifiesto): Scrum (1995), un marco iterativo e incremental para la gesti\u00f3n de proyectos, inicialmente propuesto para proyectos de desarrollo de productos y cuyo uso se ha centrado en proyectos de desarrollo de software. XP (Extreme Programming, 1996) una metodolog\u00eda iterativa de desarrollo de software que aboga por entregas frecuentes de software en ciclos de desarrollo cortos y que recibe ese nombre por su \u00e9nfasis en llevar al extremo esas buenas pr\u00e1cticas. Agile es un conjunto de valores, completamente independiente de la ejecuci\u00f3n. Espec\u00edficamente, son estos valores: Individuos e interacciones sobre procesos y herramientas Software de trabajo sobre documentaci\u00f3n completa Colaboraci\u00f3n con el cliente sobre negociaci\u00f3n de contratos Responder al cambio en lugar de seguir un plan Estos valores abarcan los procesos y la toma de decisiones. No son reglas y pr\u00e1cticas para desarrollar software. Las reglas y pr\u00e1cticas provienen de los marcos \u00e1giles (Scrum, XP, Kanban, SAFe). Los marcos brindan instrucciones detalladas sobre c\u00f3mo un equipo puede aprender a pensar de manera \u00e1gil y fomentar los valores \u00e1giles. No son \u00e1giles en s\u00ed mismos. Son herramientas que, cuando se usan correctamente, pueden respaldar los valores \u00e1giles. En realidad muchos de los principios de Agile (como por ejemplo incrementar la flexibilidad o la comunicaci\u00f3n) son ideas de sentido com\u00fan pensadas para enmendar el mal funcionamiento de las metodolog\u00edas tradicionales en ciertos escenarios y para arreglar equipos de proyecto disfuncionales","title":"El cambio"},{"location":"agile/#ventajas-desventajas","text":"Los beneficios en cuanto a flexibilidad, adaptaci\u00f3n, comunicaci\u00f3n y coordinaci\u00f3n que Agile aporta en escenarios inciertos y vol\u00e1tiles son evidentes. Sin embargo, en estos a\u00f1os se han alzado voces cr\u00edticas con esta filosof\u00eda debido a posibles limitaciones como las siguientes: Est\u00e1 muy enfocada en la captura de requisitos y el desarrollo, pero pone un foco escaso en el dise\u00f1o y en la experiencia global del usuario de la soluci\u00f3n Falta de estructura y documentaci\u00f3n Puede aumentar el riesgo de una expansi\u00f3n incontrolada del alcance del proyecto Solo funciona bien con desarrolladores experimentados Requiere reuniones muy frecuentes con los clientes, con el consiguiente coste Dificultad para escalar a proyectos grandes y con personal distribuido geogr\u00e1ficamente Algunas organizaciones encuentran dif\u00edcil implantar Agile en toda su extensi\u00f3n -con el cambio de cultura que requiere- y se quedan en sus pr\u00e1cticas superficiales Ese es tambi\u00e9n el motivo por el que las pr\u00e1cticas de Agile llevan a\u00f1os evolucionando para solucionar sus carencias y ser aplicables en escenarios m\u00e1s generales. En cualquier caso, es evidente que la flexibilidad que aporta Agile no es gratis y a veces sus costes pueden superar a sus beneficios.","title":"Ventajas / Desventajas"},{"location":"agile/#dark-agile","text":"El problema es cuando un equipo comienza a utilizar un marco Agile de forma incorrecta . El equipo comienza a centrarse m\u00e1s en su adherencia al proceso que en mantenerse fieles a los valores \u00e1giles. Esto es Dark Agile. El descubrimiento comienza a ser secuencial, donde los requisitos impulsan el dise\u00f1o, que a su vez impulsa el c\u00f3digo. Esto se opone a que el trabajo se defina y dise\u00f1e de manera colaborativa. Los resultados esperados comienzan a ser productos , a diferencia de los resultados comerciales (resultados). Todo riesgo est\u00e1 al final del proceso , en oposici\u00f3n a los riesgos que se abordan por adelantado, lo antes posible.","title":"Dark Agile"},{"location":"agile/#sintomas-de-dark-agile","text":"Estos s\u00edntomas pueden manifestarse de muchas formas. El cambio suele venir de arriba hacia abajo. Surgir\u00e1n fechas l\u00edmite para funciones espec\u00edficas. Se le empezar\u00e1 a decir al equipo qu\u00e9 construir y no qu\u00e9 problemas resolver. La gerencia, o el propietario del producto, comienza a presionar al equipo para que haga m\u00e1s y m\u00e1s r\u00e1pidamente. B\u00e1sicamente, el equipo no puede organizarse por s\u00ed mismo ni participar en el proceso de planificaci\u00f3n. Puede ser que el desarrollo sea completamente \u00e1gil, pero el proceso de descubrimiento no lo es. El descubrimiento se convierte en un proceso en el que alguien tiene una idea, la convierte en la hoja de ruta sin validaci\u00f3n, el propietario del producto re\u00fane exhaustivamente todos los requisitos necesarios, el dise\u00f1o le pone maquillaje y se env\u00eda al desarrollo para construir. No hay prueba ni validaci\u00f3n de la idea antes del desarrollo. Una vez que llega a los desarrolladores, comienzan la primera parte del proyecto que es \u00e1gil, pero en este punto ya es demasiado tarde. No hay pruebas de supuestos antes del desarrollo. Todo el riesgo se sigue guardando para el final del proceso. Es f\u00e1cil caer en estos malos h\u00e1bitos, especialmente si trabaja en una organizaci\u00f3n donde el resto de la empresa opera de manera no \u00e1gil. Para encajar en las actividades de planificaci\u00f3n de la organizaci\u00f3n, se le pide al grupo de desarrollo que haga hojas de ruta y compromisos, de modo que los otros grupos de la organizaci\u00f3n puedan planificar en consecuencia. Dark Agile puede volverse inevitable.","title":"S\u00edntomas de Dark Agile"},{"location":"agile/#disminuir-dark-agile","text":"Se deben rastrear sus pr\u00e1cticas hasta su ra\u00edz en los valores \u00e1giles y socializar este v\u00ednculo con frecuencia. Los valores de Agile deben ser la lente a trav\u00e9s de la cual se vean las estrategias y decisiones. Deben fomentarse las discusiones frecuentes y detalladas sobre los valores y c\u00f3mo se aplican a las situaciones cotidianas. Adem\u00e1s de esto, debe observarse un enfoque en los tres principios que combaten los s\u00edntomas comunes de Dark Agile. Los riesgos se abordan lo antes posible en el proceso, en lugar de al final. El trabajo se define y dise\u00f1a de manera colaborativa, en lugar de secuencial. La atenci\u00f3n se centra en resolver problemas, no en implementar funciones. No existe una f\u00f3rmula m\u00e1gica para conquistar Dark Agile, solo una b\u00fasqueda incesante de inculcar los valores de Agile.","title":"Disminuir Dark Agile"},{"location":"agile/#agile-inception-o-sprint-cero","text":"Empezamos cada proyecto con Inception, un ejercicio de descubrimiento que crea el escenario para un producto y produce un backlog inicial. Claro hasta ese momento no hay software que funcione, pero se tiene una idea clara de por qu\u00e9 queremos construir algo. T\u00edpicamente el proceso toma un d\u00eda completo, y la asistencia incluye a todo el equipo (desarrolladores, gerentes de producto, dise\u00f1adores, analistas de soporte, UX, ingenieros, testers, etc.).","title":"Agile Inception o Sprint Cero"},{"location":"agile/#objetivos-riesgos-y-anti-objetivos","text":"En lugar de intentar priorizar al inicio, lo mejor es empezar por capturar todo lo que se ha podido identificar con los participantes de la sesi\u00f3n y luego agrupar los temas para los objetivos: pol\u00edticas de la empresa, propuestas de valor, riesgos sensibles al tiempo, y posibles nuevas caracter\u00edsticas. Un buen contrapunto a las metas son los \u00abanti-objetivos\u00bb o el \u00abno-haremos\u00bb, un t\u00e9rmino para capturar todo lo que podr\u00eda ser importante alg\u00fan d\u00eda, pero que representa una amenaza para lograr las metas. Es importante asegurarse de que cada elemento en los anti-objetivos pertenece all\u00ed, y todo el mundo est\u00e1 de acuerdo (y sabe por qu\u00e9). Los riesgos son interesantes porque la intuici\u00f3n humana es a menudo el mejor indicador de los problemas futuros.","title":"Objetivos, riesgos y anti-objetivos"},{"location":"agile/#que-es-flaccid-scrum-o-flaccid-agile","text":"Flaccid Scrum es descrito por Martin Fowler como un escenario en el que un equipo de Scrum \"adopta las pr\u00e1cticas de Scrum, y tal vez incluso los principios de Scrum\", pero \"despu\u00e9s de un tiempo el progreso es lento porque el c\u00f3digo base es un desastre\", porque \"no han pagado suficiente atenci\u00f3n a la calidad interna de su software \u201d. Se postula que esto ocurre porque Scrum est\u00e1 orientado a la gesti\u00f3n en lugar de a la ingenier\u00eda, y este desaire a Scrum no es un desconocido para la comunidad de Scrum. Un ejemplo de esto lo describe \"Uncle Bob\" con una analog\u00eda en la qu\u00e9 una metodolog\u00eda muy r\u00e1pida tiene una deuda t\u00e9cnica muy grande no se puede ser r\u00e1pido y escribir c\u00f3digo de calidad al mismo tiempo.","title":"\u00bfQu\u00e9 es Flaccid Scrum o Flaccid Agile?"},{"location":"agile/#el-marketing-alredor-de-agile","text":"\u00bfC\u00f3mo las empresas ven el Agile como una forma de vender proyectos o cursos? Realmente no hay una respuesta concreta a esta pregunta, debido a qu\u00e9 cada empresa lo interpreta de forma distinta, esto crea varias vertientes en el mundo Agile. Hay muchas personas qu\u00e9 piensan que el objetivo original de restablecer la La conexi\u00f3n de negocio con el \u00e1rea t\u00e9cnica no ha sido suficiente. Por lo tanto vamos a tener empresas que vendan sus cursos como la \u00faltima coca-cola del desierto y si no te funciona es qu\u00e9 no eres lo suficientemente \u00e1gil. La contra parte, la qu\u00e9 te dice: \"ey! esto no se aprende en 1 d\u00eda\". \u00bfC\u00f3mo afecta qu\u00e9 ten la medalla de Agile sabiendo programar pero sin saber dise\u00f1o, refactoring o pruebas unitarias? Este tipo de cosas suceden muchas veces debido a que los \"developers\" no les interesa tanto el tema c\u00f3mo a los \"proyect managers\", esto acarrea una serie de problemas a la larga debido a estos \u00faltimos, exigen la mayor\u00eda de veces a las personas a su cargo qu\u00e9 su idea de Agile (o c\u00f3mo se lo vendieron) es lo mejor para su equipo y mejorar los ritmos de trabajo y productividad. Al mismo tiempo no tienen cuidado de lo qu\u00e9 en realidad piden al no tener conocimientos adecuados del tema. Realmente si lo miras desde fuera tampoco est\u00e1 mal intencionado, pero si reconozco qu\u00e9 si le das una herramienta a alguien se puede hacer da\u00f1o a \u00e9l y a los dem\u00e1s si la usa mal o no conoce lo malo de esta. Por la parte de los \"developers\" qu\u00e9 se auto determinan Agile por haber hecho un cursito o hacer alg\u00fan test y desconocen lo mencionado en la pregunta es muy probable qu\u00e9 apliquen de forma pobre la idea de Agile si este no busca a diario crecer como programador escribiendo mejor c\u00f3digo para las personas. Otros buscan hacer su empresa Agile y se dan de morros contra sus jefes o negocio. Tengo la impresi\u00f3n de qu\u00e9 sucede algo parecido a lo anterior pero ahora es el developer el que quiere cambiar, podr\u00eda usar la misma analog\u00eda pero realmente no es la misma. Creo qu\u00e9 es m\u00e1s importante ir haciendo t\u00fa peque\u00f1as cosas Agile en el d\u00eda a d\u00eda qu\u00e9 buscar cambiar la cultura de toda la empresa lo cu\u00e1l puede destinarla al fracaso a todos los niveles si no lo hacen bien y a tiempo.","title":"El marketing alredor de Agile"},{"location":"agile/#innovation-theather-steve-blank","text":"A medida que las organizaciones crecen, comienzan a priorizar el proceso sobre el producto. Eso impide la innovaci\u00f3n real. Cuando las organizaciones se dan cuenta de esto, por lo general responden de tres maneras: contratando consultores para hacer una reorganizaci\u00f3n (eso es \"organizational theater\"), adoptando nuevos procesos como hackatones para estimular la innovaci\u00f3n (eso es \" innovation theater \") o tomando medidas para intentar reformar sus comportamientos burocr\u00e1ticos (eso es \"process theater\"). En cambio, lo que las organizaciones necesitan es una Doctrina de Innovaci\u00f3n que aborde la cultura, la mentalidad, el proceso y oriente los esfuerzos de la organizaci\u00f3n para lograr innovaciones reales.","title":"Innovation theather - Steve Blank"},{"location":"agile/#agile-contra-la-realidad","text":"\u00bfC\u00f3mo de compatibles son los principios de entorno colaborativo con el rendimiento? Adem\u00e1s del evidente intercambio de conocimientos que da paso al aprendizaje individual y grupal, un entorno colaborativo ofrece muchos otros beneficios que impactan positivamente al rendimiento de la empresa como por ejemplo fortalecer los lazos de cooperaci\u00f3n entre los integrantes El trabajo cooperativo requiere ciertos retos y actitudes para superar las desventajas que tiene y convertirse as\u00ed en una forma exitosa de organizaci\u00f3n. Existen ciertas trabas que acent\u00faan los inconvenientes del trabajo colaborativo. Al igual que ocurre en el trabajo en equipo, la relaci\u00f3n entre compa\u00f1eros puede ser complicada por la incompatibilidad de personalidades o por una posible competici\u00f3n entre ellos. Por ejemplo si la colaboraci\u00f3n no es un \u00e9xito supondr\u00e1 un malgasto de recursos y perjudicar\u00e1 a las personas y la organizaci\u00f3n. \u00bfSi Agile es tan bueno por qu\u00e9 hay proyectos qu\u00e9 a\u00fan usan Waterfall? Sencillo, no vas a encontrar peor metodolog\u00eda que un Agile mal implementado. El Agile mal implementado te puede traer costos excesivos de desarrollo, implementaci\u00f3n de tecnolog\u00edas no sustentables para los equipos internos, cambios constantes y falta de documentaci\u00f3n necesaria para el futuro. Es as\u00ed como muchas caen en el \u201cinnovation theather\u201d.","title":"Agile contra la realidad"},{"location":"big-data/","text":"Big Data Introducci\u00f3n El big data permite recopilar informaci\u00f3n de las visitas de la p\u00e1gina web, redes sociales, registros de llamadas y otros or\u00edgenes de datos para perfeccionar la experiencia de interacci\u00f3n, as\u00ed como optimizar el valor que se ofrece. En nuestro caso nos servir\u00e1 para alimentar de datos a nuestra inteligencia artificial. Dado que los proyectos de Big Data a han madurado en los \u00faltimos a\u00f1os desde m\u00f3dulos de silos hasta software empresarial y debido a la creciente complejidad de la escala algor\u00edtmica y de datos (3 Vs [Volumen, Velocidad y Veracidad] ), surgi\u00f3 la necesidad de ciclos de desarrollo cortos y lanzamientos frecuentes. Desaf\u00edo del TDD en Big Data Manejar grandes volumenes de datos implica que no se puede probar todo, porque no es rentable y si lo fuese ser\u00eda poco eficiente. El gran n\u00famero de tecnolog\u00edas en el ecosistema y la computaci\u00f3n distribuida lo hace d\u00edficil de probar. Se requieren conocimientos amplios del negocio o los datos para saber si el resultado es realmente correcto e incluso as\u00ed no se llega al 100% de efectividad si el volumen es muy grande.","title":"Big Data"},{"location":"big-data/#big-data","text":"","title":"Big Data"},{"location":"big-data/#introduccion","text":"El big data permite recopilar informaci\u00f3n de las visitas de la p\u00e1gina web, redes sociales, registros de llamadas y otros or\u00edgenes de datos para perfeccionar la experiencia de interacci\u00f3n, as\u00ed como optimizar el valor que se ofrece. En nuestro caso nos servir\u00e1 para alimentar de datos a nuestra inteligencia artificial. Dado que los proyectos de Big Data a han madurado en los \u00faltimos a\u00f1os desde m\u00f3dulos de silos hasta software empresarial y debido a la creciente complejidad de la escala algor\u00edtmica y de datos (3 Vs [Volumen, Velocidad y Veracidad] ), surgi\u00f3 la necesidad de ciclos de desarrollo cortos y lanzamientos frecuentes.","title":"Introducci\u00f3n"},{"location":"big-data/#desafio-del-tdd-en-big-data","text":"Manejar grandes volumenes de datos implica que no se puede probar todo, porque no es rentable y si lo fuese ser\u00eda poco eficiente. El gran n\u00famero de tecnolog\u00edas en el ecosistema y la computaci\u00f3n distribuida lo hace d\u00edficil de probar. Se requieren conocimientos amplios del negocio o los datos para saber si el resultado es realmente correcto e incluso as\u00ed no se llega al 100% de efectividad si el volumen es muy grande.","title":"Desaf\u00edo del TDD en Big Data"},{"location":"programer/","text":"Filosof\u00eda del programador El Desprecio Introducci\u00f3n Una de las cosas con las qu\u00e9 deberemos vivir en el d\u00eda a d\u00eda, siempre habr\u00e1 tanto agradecimiento como desprecio en todas las labores. En nuestro caso puede ser a\u00fan m\u00e1s debido al gran desconocimiento del sector. \u00bfPor qu\u00e9 hay desprecio por nuestra labor? El problema reside en comparar nuestra labor con las de otro sector c\u00f3mo podr\u00eda ser la construcci\u00f3n como el rol de \u201cpica c\u00f3digo\u201d. La realidad es qu\u00e9 es una actividad totalmente intelectual y creativa, esto se ve claramente en la toma de requisitos o el an\u00e1lisis inicial del problema. La imaginaci\u00f3n es tu l\u00edmite en el mundo del software, la mayor\u00eda de veces se considera qu\u00e9 la programaci\u00f3n est\u00e1 efectuada por recursos reemplazables. En realidad es muy dif\u00edcil encontrar un reemplazo a Kent Beck o Martin Fowler, ambas son grandes personalidades del mundo del desarrollo pero sus aportes dispares por lo tanto es dif\u00edcil predecir cu\u00e1l es el aporte de una persona si por ejemplo trabajasen haciendo el mismo proyecto de manera separada el resultado ser\u00eda totalmente diferente. A parte de lo anteriormente mencionado tambi\u00e9n influyen los sentimientos de cada persona, situaci\u00f3n en la vida, etc. Bit-twiddler Ser\u00eda la dualidad de personalidades entre aquel t\u00e9cnicamente brillante pero despreocupado por los problemas de las personas, y el consultor, que es aquel con habilidades humanas y comunicativas, capaz de entender a los usuarios y las necesidades de negocio pero con falta de t\u00e9cnica. Aquellos t\u00e9cnicamente brillantes no tienen por qu\u00e9 ser necesariamente una especie de sujetos socialmente inadaptados, que no desean involucrarse en los problemas de las personas, mientras que los t\u00e9cnicamente ineptos no tienen por qu\u00e9 ser grandes consultores, gestores o comerciales. En cualquier caso, el encasillamiento de las personas t\u00e9cnicamente cualificadas como frikis o nerds se ha convertido en un topicazo y en un prejuicio de amplio calado social, que no contribuye en nada a la valoraci\u00f3n de los profesionales del desarrollo de software. Por suerte se est\u00e1 viendo qu\u00e9 los perfiles que m\u00e1s valen tienen ambas cosas aunque no sean especialistas en una de ellas. La ense\u00f1anza de la programaci\u00f3n Una de las primeras consecuencias de que la programaci\u00f3n sea despreciada, o considerada como impropia de un ingeniero, es que la pr\u00e1ctica de la programaci\u00f3n, junto a los est\u00e1ndares de codificaci\u00f3n y el dominio de las herramientas de desarrollo, han pasado a ser materias sin mucho inter\u00e9s dentro de los planes acad\u00e9micos. Las universidades pretenden formar ingenieros, no peones alba\u00f1iles. Por otra parte, la ense\u00f1anza de la programaci\u00f3n es compleja. Se requieren varios a\u00f1os de experiencia para empezar a adquirir buenos h\u00e1bitos de programaci\u00f3n. En t\u00e9rmino medio, las personas tardan de 1 a 3 a\u00f1os en empezar a ser productivas. En realidad, el verdadero problema tal vez no est\u00e9 ligado tanto a la propia dificultad de la ense\u00f1anza de la programaci\u00f3n, como a la ense\u00f1anza de ciertos contenidos que inculcan en los alumnos el desprecio por ella, el prejuicio de que la programaci\u00f3n es una actividad impropia de un ingeniero, y el prejuicio de que puede programar cualquiera. Lo peor no es que los estudiantes terminen su formaci\u00f3n con m\u00e1s o menos conocimientos, sino que terminen con una escasa predisposici\u00f3n por adquirirlos. La calidad El desprecio por la programaci\u00f3n y del mal empleo de la t\u00e9cnica deriva una escasa calidad de los programas. En el \u00e1mbito de los servicios de software abundan empleados que escriben c\u00f3digo sin pensar o con dejadez. Lo qu\u00e9 a largo plazo presenta en un c\u00f3digo inmantenible. inmantenible, porque no es posible depurarlo ni modificarlo sin reescribir por completo. El problema no es de rodaje sino de mentalidad. A falta de la predisposici\u00f3n necesaria, jam\u00e1s aprenden. En muchos casos no importa, porque hacerlo bien o mal es indiferente. Nadie va a valorarlo, ni nadie espera de ellos nada m\u00e1s salvo que el c\u00f3digo funcione. Acaba reinando la desidia, la ley del m\u00ednimo esfuerzo, el principio de no tocar lo que ya estaba y el principio de que lo arregle quien lo hizo. La ausencia de calidad no es problema de falta de metodolog\u00eda, ni se resuelve enfatizando en procesos formales o en la exhaustiva documentaci\u00f3n de cada aspecto del programa. Es sencillamente un problema de despreocupaci\u00f3n por el c\u00f3digo, desinter\u00e9s por la excelencia t\u00e9cnica y tecnoanalfabetismo. El bodyshopping La palabra bodyshopping suele traducirse al castellano como venta de carne. Consiste en la pr\u00e1ctica de subcontratar mano de obra a terceras empresas con objeto de ahorrar costes estructurales, riesgos de contrataci\u00f3n, y aprovechar ciertas ventajas fiscales. Si la programaci\u00f3n no es una actividad creativa, sino una labor mec\u00e1nica, trivial, intensiva en mano de obra, y que no aporta valor a\u00f1adido a la empresa, entonces podr\u00eda ser cubierta por recursos reemplazables, que no necesitan tomar decisiones. El perfil de estos recursos responder\u00eda a personas poco valoradas, sin suficiente formaci\u00f3n, sin experiencia o sin aspiraciones. La escasa valoraci\u00f3n del puesto de programador impulsa a las personas con m\u00e1s talento a abandonarlo en favor de puestos mejor remunerados, como suelen ser los relacionados con el \u00e1rea comercial o la gesti\u00f3n. Los puestos de programador quedan relegados a recursos contratados en funci\u00f3n de la demanda de trabajo, con muy alta rotaci\u00f3n. El cliente asume un coste continuo en formaci\u00f3n y una alta rotaci\u00f3n de personal. Durante los primeros a\u00f1os las personas no rinden al cien por cien. Una vez formadas empiezan a ser productivas, pero la ley suele establecer un periodo m\u00e1ximo de subcontrataci\u00f3n que obliga a contratarlas directamente o a sustituirlas. El offshoring El offshoring o deslocalizaci\u00f3n es la pr\u00e1ctica de trasladar determinados procesos de negocio, t\u00edpicamente intensivos en mano de obra, a pa\u00edses donde los costes productivos son m\u00e1s bajos, como aquellos que est\u00e1n a\u00fan en v\u00edas de desarrollo. Uno de los problemas de las f\u00e1bricas de software y del offshoring es la distancia. Si trasladar el trabajo es costoso, otra opci\u00f3n es traer aqu\u00ed la mano de obra. Con objeto de salvar los obst\u00e1culos legales que en materia de legislaci\u00f3n laboral existen. Con el remoto se ha conseguido solventar algunos de estos problemas. La productividad de las f\u00e1bricas de software es muy baja, ya que no es posible crear software por el m\u00e9todo de la fuerza bruta. Sin embargo, pensar que la contrataci\u00f3n de mano de obra barata reduce los costes es una falacia. Las industrias que logran reducir sus costes productivos suelen hacerlo mediante la inversi\u00f3n en maquinaria m\u00e1s moderna y trabajadores m\u00e1s cualificados y polivalentes.","title":"Filosof\u00eda del programador"},{"location":"programer/#filosofia-del-programador","text":"","title":"Filosof\u00eda del programador"},{"location":"programer/#el-desprecio","text":"","title":"El Desprecio"},{"location":"programer/#introduccion","text":"Una de las cosas con las qu\u00e9 deberemos vivir en el d\u00eda a d\u00eda, siempre habr\u00e1 tanto agradecimiento como desprecio en todas las labores. En nuestro caso puede ser a\u00fan m\u00e1s debido al gran desconocimiento del sector.","title":"Introducci\u00f3n"},{"location":"programer/#por-que-hay-desprecio-por-nuestra-labor","text":"El problema reside en comparar nuestra labor con las de otro sector c\u00f3mo podr\u00eda ser la construcci\u00f3n como el rol de \u201cpica c\u00f3digo\u201d. La realidad es qu\u00e9 es una actividad totalmente intelectual y creativa, esto se ve claramente en la toma de requisitos o el an\u00e1lisis inicial del problema. La imaginaci\u00f3n es tu l\u00edmite en el mundo del software, la mayor\u00eda de veces se considera qu\u00e9 la programaci\u00f3n est\u00e1 efectuada por recursos reemplazables. En realidad es muy dif\u00edcil encontrar un reemplazo a Kent Beck o Martin Fowler, ambas son grandes personalidades del mundo del desarrollo pero sus aportes dispares por lo tanto es dif\u00edcil predecir cu\u00e1l es el aporte de una persona si por ejemplo trabajasen haciendo el mismo proyecto de manera separada el resultado ser\u00eda totalmente diferente. A parte de lo anteriormente mencionado tambi\u00e9n influyen los sentimientos de cada persona, situaci\u00f3n en la vida, etc.","title":"\u00bfPor qu\u00e9 hay desprecio por nuestra labor?"},{"location":"programer/#bit-twiddler","text":"Ser\u00eda la dualidad de personalidades entre aquel t\u00e9cnicamente brillante pero despreocupado por los problemas de las personas, y el consultor, que es aquel con habilidades humanas y comunicativas, capaz de entender a los usuarios y las necesidades de negocio pero con falta de t\u00e9cnica. Aquellos t\u00e9cnicamente brillantes no tienen por qu\u00e9 ser necesariamente una especie de sujetos socialmente inadaptados, que no desean involucrarse en los problemas de las personas, mientras que los t\u00e9cnicamente ineptos no tienen por qu\u00e9 ser grandes consultores, gestores o comerciales. En cualquier caso, el encasillamiento de las personas t\u00e9cnicamente cualificadas como frikis o nerds se ha convertido en un topicazo y en un prejuicio de amplio calado social, que no contribuye en nada a la valoraci\u00f3n de los profesionales del desarrollo de software. Por suerte se est\u00e1 viendo qu\u00e9 los perfiles que m\u00e1s valen tienen ambas cosas aunque no sean especialistas en una de ellas.","title":"Bit-twiddler"},{"location":"programer/#la-ensenanza-de-la-programacion","text":"Una de las primeras consecuencias de que la programaci\u00f3n sea despreciada, o considerada como impropia de un ingeniero, es que la pr\u00e1ctica de la programaci\u00f3n, junto a los est\u00e1ndares de codificaci\u00f3n y el dominio de las herramientas de desarrollo, han pasado a ser materias sin mucho inter\u00e9s dentro de los planes acad\u00e9micos. Las universidades pretenden formar ingenieros, no peones alba\u00f1iles. Por otra parte, la ense\u00f1anza de la programaci\u00f3n es compleja. Se requieren varios a\u00f1os de experiencia para empezar a adquirir buenos h\u00e1bitos de programaci\u00f3n. En t\u00e9rmino medio, las personas tardan de 1 a 3 a\u00f1os en empezar a ser productivas. En realidad, el verdadero problema tal vez no est\u00e9 ligado tanto a la propia dificultad de la ense\u00f1anza de la programaci\u00f3n, como a la ense\u00f1anza de ciertos contenidos que inculcan en los alumnos el desprecio por ella, el prejuicio de que la programaci\u00f3n es una actividad impropia de un ingeniero, y el prejuicio de que puede programar cualquiera. Lo peor no es que los estudiantes terminen su formaci\u00f3n con m\u00e1s o menos conocimientos, sino que terminen con una escasa predisposici\u00f3n por adquirirlos.","title":"La ense\u00f1anza de la programaci\u00f3n"},{"location":"programer/#la-calidad","text":"El desprecio por la programaci\u00f3n y del mal empleo de la t\u00e9cnica deriva una escasa calidad de los programas. En el \u00e1mbito de los servicios de software abundan empleados que escriben c\u00f3digo sin pensar o con dejadez. Lo qu\u00e9 a largo plazo presenta en un c\u00f3digo inmantenible. inmantenible, porque no es posible depurarlo ni modificarlo sin reescribir por completo. El problema no es de rodaje sino de mentalidad. A falta de la predisposici\u00f3n necesaria, jam\u00e1s aprenden. En muchos casos no importa, porque hacerlo bien o mal es indiferente. Nadie va a valorarlo, ni nadie espera de ellos nada m\u00e1s salvo que el c\u00f3digo funcione. Acaba reinando la desidia, la ley del m\u00ednimo esfuerzo, el principio de no tocar lo que ya estaba y el principio de que lo arregle quien lo hizo. La ausencia de calidad no es problema de falta de metodolog\u00eda, ni se resuelve enfatizando en procesos formales o en la exhaustiva documentaci\u00f3n de cada aspecto del programa. Es sencillamente un problema de despreocupaci\u00f3n por el c\u00f3digo, desinter\u00e9s por la excelencia t\u00e9cnica y tecnoanalfabetismo.","title":"La calidad"},{"location":"programer/#el-bodyshopping","text":"La palabra bodyshopping suele traducirse al castellano como venta de carne. Consiste en la pr\u00e1ctica de subcontratar mano de obra a terceras empresas con objeto de ahorrar costes estructurales, riesgos de contrataci\u00f3n, y aprovechar ciertas ventajas fiscales. Si la programaci\u00f3n no es una actividad creativa, sino una labor mec\u00e1nica, trivial, intensiva en mano de obra, y que no aporta valor a\u00f1adido a la empresa, entonces podr\u00eda ser cubierta por recursos reemplazables, que no necesitan tomar decisiones. El perfil de estos recursos responder\u00eda a personas poco valoradas, sin suficiente formaci\u00f3n, sin experiencia o sin aspiraciones. La escasa valoraci\u00f3n del puesto de programador impulsa a las personas con m\u00e1s talento a abandonarlo en favor de puestos mejor remunerados, como suelen ser los relacionados con el \u00e1rea comercial o la gesti\u00f3n. Los puestos de programador quedan relegados a recursos contratados en funci\u00f3n de la demanda de trabajo, con muy alta rotaci\u00f3n. El cliente asume un coste continuo en formaci\u00f3n y una alta rotaci\u00f3n de personal. Durante los primeros a\u00f1os las personas no rinden al cien por cien. Una vez formadas empiezan a ser productivas, pero la ley suele establecer un periodo m\u00e1ximo de subcontrataci\u00f3n que obliga a contratarlas directamente o a sustituirlas.","title":"El bodyshopping"},{"location":"programer/#el-offshoring","text":"El offshoring o deslocalizaci\u00f3n es la pr\u00e1ctica de trasladar determinados procesos de negocio, t\u00edpicamente intensivos en mano de obra, a pa\u00edses donde los costes productivos son m\u00e1s bajos, como aquellos que est\u00e1n a\u00fan en v\u00edas de desarrollo. Uno de los problemas de las f\u00e1bricas de software y del offshoring es la distancia. Si trasladar el trabajo es costoso, otra opci\u00f3n es traer aqu\u00ed la mano de obra. Con objeto de salvar los obst\u00e1culos legales que en materia de legislaci\u00f3n laboral existen. Con el remoto se ha conseguido solventar algunos de estos problemas. La productividad de las f\u00e1bricas de software es muy baja, ya que no es posible crear software por el m\u00e9todo de la fuerza bruta. Sin embargo, pensar que la contrataci\u00f3n de mano de obra barata reduce los costes es una falacia. Las industrias que logran reducir sus costes productivos suelen hacerlo mediante la inversi\u00f3n en maquinaria m\u00e1s moderna y trabajadores m\u00e1s cualificados y polivalentes.","title":"El offshoring"}]}